{"ast":null,"code":"import { Observable, interval } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let RxjsComponent = /*#__PURE__*/(() => {\n  class RxjsComponent {\n    constructor() {\n      // this.retornaObservable().pipe(\n      //   retry(2)\n      // ).subscribe(\n      //   valor => console.log('Subs:', valor ),\n      //   error => console.warn('Error:', error ),\n      //   () => console.info('Obs terminado')\n      // );\n      this.intervalSubs = this.retornaIntervalo().subscribe(console.log);\n    }\n\n    ngOnDestroy() {\n      this.intervalSubs.unsubscribe();\n    }\n\n    retornaIntervalo() {\n      return interval(100).pipe( // take(10),\n      map(valor => valor + 1), // 0 => 1\n      filter(valor => valor % 2 === 0 ? true : false));\n    }\n\n    retornaObservable() {\n      let i = -1;\n      return new Observable(observer => {\n        const intervalo = setInterval(() => {\n          i++;\n          observer.next(i);\n\n          if (i === 4) {\n            clearInterval(intervalo);\n            observer.complete();\n          }\n\n          if (i === 2) {\n            observer.error('i llego al valor de 2');\n          }\n        }, 1000);\n      });\n    }\n\n  }\n\n  RxjsComponent.ɵfac = function RxjsComponent_Factory(t) {\n    return new (t || RxjsComponent)();\n  };\n\n  RxjsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RxjsComponent,\n    selectors: [[\"app-rxjs\"]],\n    decls: 2,\n    vars: 0,\n    template: function RxjsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"rxjs works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return RxjsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}